EventLoopGroup用于管理通道channel连接的
    bossGroup线程负责接收socket的连接请求,每接收一个连接请求就产生一个Channel,并把这个channel交给
ServerBootstrap初始化时指定的ServerSocketChannel,boss线程则继续处理socket的连接请求
  注:ServerBootstrap监听几个端口对应几个boss线程


workerGroup线程组：
    worker线程负责继续处理channel请求。
    ServerSocketChannel会从worker线程组中找出一个worker线程来继续处理这个请求。

   如果是OioServerSocketChannelFactory也就是阻塞型IO时，这个channel上所有的socket消息，从开始到 channel（socket）关闭，都只由这个特定的worker来处理。
如果是NioServerSocketChannelFactory也就是非阻塞型IO时，每个worker可以服务不同的socket或者说channel，worker线程和channel不再有一一对应的关系。
worker的生命周期：对于普通IO，worker线程从连接建立后就保持。对于NIO则消息来临时从worker线程组中取出一个可用的线程，执行相应的ChannelPipeline（类似过滤器）等后，如果没有产生异常则会被回收。


Bootstrap
    ServerBootstrap用于绑定端口，以及初始化设置线程组，handler等
    Boostarp用于连接对应的IP和端口，以及初始化。


ChannelPipeline和ChannelHandler
    channerlPipeLine:
        Netty中的每一个Channel，都有一个独立的ChannelPipeline，中文称为“通道水管”。只不过这个水管是双向的里面流淌着数据，数据可以通过这个“水管”流入到服务器，也可以通过这个“水管”从服务器流出。
    ChannelHandler:
        在ChannelPipeline中，有若干的过滤器。我们称之为“ChannelHandler”（处理器或者过滤器）。同“流入”和“流出”的概念向对应：用于处理/过滤 流入数据的ChannelHandler，称之为“ChannelInboundHandler”；用于处理/过滤 流出数据的ChannelHandler，称之为“ChannelOutboundHandler”。
        类似Servlet中的过滤器，也是典型的责任链模式。需要注意，虽然数据管道中的Handler是按照顺序执行的，但不代表某一个Handler会处理任何一种由“上一个handler”发送过来的数据。某些Handler会检查传来的数据是否符合要求，如果不符合自己的处理要求，则不进行处理。

一些Handler类举例
    StringDecoder：实现了对接收的byte数据转换为String

    HttpRequestDecoder：实现了Http协议的数据输入格式的解析。这个类将数据编码为HttpMessage对象，并交由下一个ChannelHandler进行处理。

    ByteArrayDecoder：最基础的数据流输入处理器，将所有的byte转换为ByteBuf对象（一般的实现类是：io.netty.buffer.UnpooledUnsafeDirectByteBuf）。我们进行一般的文本格式信息传输到服务器时，最好使用这个Handler将byte数组转换为ByteBuf对象。
    DelimiterBasedFrameDecoder：这个数据流输入处理器，会按照外部传入的数据中给定的某个关键字符/关键字符串，重新将数据组装为新的段落并发送给下一个Handler处理器。后文中，我们将使用这个处理器进行TCP半包的问题。
还有很多直接支持标准数据格式解析的处理器，例如支持Google Protocol Buffers 数据格式解析的ProtobufDecoder和ProtobufVarint32FrameDecoder处理器。
相反的有对应成对使用的解码器：HttpResponseEncoder，ByteArrayEncoder，StringEncoder；